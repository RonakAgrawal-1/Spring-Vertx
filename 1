import io.vertx.core.AbstractVerticle;
import io.vertx.core.Promise;
import io.vertx.ext.web.Router;
import io.vertx.ext.web.RoutingContext;
import io.r2dbc.spi.ConnectionFactory;
import io.vertx.sqlclient.SqlClient;
import io.vertx.sqlclient.vertx.VertxSqlConnection;
import io.vertx.sqlclient.SqlConnection;
import reactor.core.publisher.Mono;
import reactor.core.publisher.Flux;
import io.r2dbc.postgresql.PostgresqlConnectionConfiguration;
import io.r2dbc.postgresql.PostgresqlConnectionFactory;

public class MainVerticle extends AbstractVerticle {

    @Override
    public void start(Promise<Void> startPromise) {
        // Create a router to handle HTTP requests
        Router router = Router.router(vertx);

        // Enable reading request bodies for all routes
        router.route().handler(io.vertx.ext.web.handler.BodyHandler.create());

        // Define a simple GET endpoint
        router.get("/api/data").handler(this::handleGetData);

        // Deploy the HTTP server with the router
        vertx.createHttpServer()
            .requestHandler(router)
            .listen(8080, http -> {
                if (http.succeeded()) {
                    startPromise.complete();
                    System.out.println("HTTP server started on port 8080");
                } else {
                    startPromise.fail(http.cause());
                }
            });
    }

    private void handleGetData(RoutingContext routingContext) {
        // Create an R2DBC connection
        ConnectionFactory connectionFactory = new PostgresqlConnectionFactory(
            PostgresqlConnectionConfiguration.builder()
                .host("your_postgresql_host")
                .port(5432)
                .database("your_database")
                .username("your_username")
                .password("your_password")
                .build());

        // Convert R2DBC connection to Vert.x SqlConnection
        Mono<SqlConnection> connectionMono = Mono.from(connectionFactory.create())
            .map(VertxSqlConnection::new);

        // Perform a reactive query
        Flux.from(connectionMono)
            .flatMapMany(connection ->
                Flux.from(connection
                    .query("SELECT * FROM your_table")
                    .execute()))
            .map(YourEntity::fromRow)
            .collectList()
            .subscribe(
                yourEntities -> routingContext.response().end(yourEntities.toString()),
                throwable -> {
                    routingContext.response().setStatusCode(500).end(throwable.getMessage());
                }
            );
    }
}
