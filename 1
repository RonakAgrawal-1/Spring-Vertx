import io.vertx.core.AbstractVerticle;
import io.vertx.core.json.JsonObject;
import io.vertx.ext.web.Router;
import io.vertx.ext.web.RoutingContext;
import io.vertx.ext.web.handler.BodyHandler;
import io.vertx.jdbcclient.JDBCPool;
import io.vertx.sqlclient.Row;
import io.vertx.sqlclient.RowSet;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public class MainVerticle extends AbstractVerticle {

    private JDBCPool jdbcPool;

    @Override
    public void start() {
        // Set up JDBC pool
        jdbcPool = JDBCPool.pool(vertx, new JsonObject()
                .put("driver_class", "io.vertx.ext.jdbc.spi.impl.PostgreSQLDriver")
                .put("url", "jdbc:postgresql://localhost:5432/your_database")
                .put("user", "your_username")
                .put("password", "your_password")
                .put("max_pool_size", 10));

        // Set up HTTP server and router
        Router router = Router.router(vertx);
        router.route().handler(BodyHandler.create());
        router.get("/api/data").handler(this::handleGetData);

        // Start the HTTP server
        vertx.createHttpServer()
                .requestHandler(router)
                .listen(8080);
    }

    private void handleGetData(RoutingContext routingContext) {
        Flux<JsonObject> dataFlux = getDataFromDatabase();

        // Convert Flux to a Vert.x readable stream
        vertx.eventBus().<JsonObject>request("dataStream", msg -> {
            dataFlux.subscribe(msg::reply, err -> routingContext.fail(500, err.getMessage()));
        });

        // Set up the response
        routingContext.response()
                .setChunked(true)
                .putHeader("Content-Type", "application/json")
                .setStatusCode(200)
                .end();
    }

    private Flux<JsonObject> getDataFromDatabase() {
        return Flux.create(sink -> {
            jdbcPool.query("SELECT * FROM your_table")
                    .execute(ar -> {
                        if (ar.succeeded()) {
                            RowSet<Row> rows = ar.result();
                            for (Row row : rows) {
                                sink.next(row.toJson());
                            }
                            sink.complete();
                        } else {
                            sink.error(ar.cause());
                        }
                    });
        });
    }
}
