import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.anyString;
import static org.mockito.Mockito.when;

import java.util.Collections;
import java.util.List;
import java.util.Map;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.core.ParameterizedTypeReference;
import org.springframework.http.HttpEntity;

@ExtendWith(MockitoExtension.class)
public class DataProductApiClientTest {

    @Mock
    private RestTemplateHelper restTemplateHelper;

    @InjectMocks
    private DataProductApiClient dataProductApiClient;

    @Test
    public void testGetDataProducts() {
        Request request = new Request();
        // Populate the request object as needed
        request.setDataProduct("exampleDataProduct");
        request.setParameters(Map.of("param1", "value1"));
        request.setFields(List.of("field1", "field2"));
        request.setPageSize(10);
        request.setOffset(0);
        request.setOrderBy("field1");
        request.setFilter("exampleFilter");

        Map<String, String> expectedRecord = Map.of("id", "1", "name", "exampleName");
        List<Map<String, String>> expectedResponse = Collections.singletonList(expectedRecord);

        when(restTemplateHelper.post(anyString(), any(HttpEntity.class), any(ParameterizedTypeReference.class)))
            .thenReturn(expectedResponse);

        List<Map<String, String>> actualResponse = dataProductApiClient.getDataProducts(request);

        assertEquals(expectedResponse, actualResponse, "The expected and actual responses should match.");
    }

    // Mock classes (for illustration purposes, adjust as per actual implementation)
    public static class Request {
        private String dataProduct;
        private Map<String, String> parameters;
        private List<String> fields;
        private int pageSize;
        private int offset;
        private String orderBy;
        private String filter;

        // Getters and setters
        public String getDataProduct() {
            return dataProduct;
        }

        public void setDataProduct(String dataProduct) {
            this.dataProduct = dataProduct;
        }

        public Map<String, String> getParameters() {
            return parameters;
        }

        public void setParameters(Map<String, String> parameters) {
            this.parameters = parameters;
        }

        public List<String> getFields() {
            return fields;
        }

        public void setFields(List<String> fields) {
            this.fields = fields;
        }

        public int getPageSize() {
            return pageSize;
        }

        public void setPageSize(int pageSize) {
            this.pageSize = pageSize;
        }

        public int getOffset() {
            return offset;
        }

        public void setOffset(int offset) {
            this.offset = offset;
        }

        public String getOrderBy() {
            return orderBy;
        }

        public void setOrderBy(String orderBy) {
            this.orderBy = orderBy;
        }

        public String getFilter() {
            return filter;
        }

        public void setFilter(String filter) {
            this.filter = filter;
        }
    }
}
